import usb.core
import usb.util
import usb.control
import sys
import argparse

vendor = 0x0c45
product = 0x8513
bConfigurationValue = 1
prefix = [0x04]


keycodes = {
    'esc'     : ([0x15], [0x00]),
    'f1'      : ([0x18], [0x03]),
    'f2'      : ([0x1b], [0x06]),
    'f3'      : ([0x1e], [0x09]),
    'f4'      : ([0x21], [0x0c]),
    'f5'      : ([0x24], [0x0f]),
    'f6'      : ([0x27], [0x12]),
    'f7'      : ([0x2a], [0x15]),
    'f8'      : ([0x2d], [0x18]),
    'f9'      : ([0x30], [0x1b]),
    'f10'     : ([0x33], [0x1e]),
    'f11'     : ([0x36], [0x21]),
    'f12'     : ([0x39], [0x24]),
    'up'      : ([0x3f], [0x29]),
    'prtscr'  : ([0x3f], [0x2a]),
    'scroll'  : ([0x42], [0x2d]),
    'num1'    : ([0x45], [0x2f]),
    'pause'   : ([0x45], [0x30]),
    'num2'    : ([0x48], [0x32]),
    'num3'    : ([0x4b], [0x35]),
    'nument'  : ([0x4e], [0x38]),
    '`'       : ([0x54], [0x3f]),
    '1'       : ([0x57], [0x42]),
    '2'       : ([0x5a], [0x45]),
    '3'       : ([0x5d], [0x48]),
    '4'       : ([0x60], [0x4b]),
    '5'       : ([0x63], [0x4e]),
    '6'       : ([0x66], [0x51]),
    '7'       : ([0x69], [0x54]),
    '8'       : ([0x6c], [0x57]),
    '9'       : ([0x6f], [0x5a]),
    '0'       : ([0x72], [0x5d]),
    '-'       : ([0x75], [0x60]),
    '='       : ([0x78], [0x63]),
    'left'    : ([0x7b], [0x65]),
    'bckspc'  : ([0x7b], [0x66]),
    'down'    : ([0x7e], [0x68]),
    'right'   : ([0x81], [0x6b]),
    'insert'  : ([0x7e], [0x69]),
    'home'    : ([0x81], [0x6c]),
    'pgup'    : ([0x84], [0x6f]),
    'num0'    : ([0x87], [0x71]),
    'numlck'  : ([0x87], [0x72]),
    'numdel'  : ([0x8a], [0x74]),
    'num/'    : ([0x8a], [0x75]),
    'num*'    : ([0x8d], [0x78]),
    'num-'    : ([0x90], [0x7b]),
    'tab'     : ([0x93], [0x7e]),
    'q'       : ([0x96], [0x81]),
    'w'       : ([0x99], [0x84]),
    'e'       : ([0x9c], [0x87]),
    'r'       : ([0x9f], [0x8a]),
    't'       : ([0xa2], [0x8d]),
    'y'       : ([0xa5], [0x90]),
    'u'       : ([0xa8], [0x93]),
    'i'       : ([0xab], [0x96]),
    'o'       : ([0xae], [0x99]),
    'p'       : ([0xb1], [0x9c]),
    '['       : ([0xb4], [0x9f]),
    ']'       : ([0xb7], [0xa2]),
    'bckslash': ([0xba], [0xa5]),
    'delete'  : ([0xbd], [0xa8]),
    'end'     : ([0xc0], [0xab]),
    'pgdn'    : ([0xc3], [0xae]),
    'num7'    : ([0xc6], [0xb1]),
    'num8'    : ([0xc9], [0xb4]),
    'num9'    : ([0xcc], [0xb7]),
    'num+'    : ([0xcf], [0xba]),
    'caps'    : ([0xd2], [0xbd]),
    'a'       : ([0xd5], [0xc0]),
    's'       : ([0xd8], [0xc3]),
    'd'       : ([0xdb], [0xc6]),
    'f'       : ([0xde], [0xc9]),
    'g'       : ([0xe1], [0xcc]),
    'h'       : ([0xe4], [0xcf]),
    'j'       : ([0xe7], [0xd2]),
    'k'       : ([0xea], [0xd5]),
    'l'       : ([0xed], [0xd8]),
    ';'       : ([0xf0], [0xdb]),
    'quote'   : ([0xf3], [0xde]),
#   ''        : ([0xf6], [0xe1]), #nothing
    'enter'   : ([0xf9], [0xe4]),
#   ''        : ([0xfc], [0xe7]), #nothing
#   ''        : ([0xff], [0xea]), #nothing
    'num4'    : ([0x05], [0xf0]),
    'num5'    : ([0x08], [0xf3]),
    'num6'    : ([0x0b], [0xf6]),
#   ''        : ([0x0e], [0xf9]), #nothing
    'lshift'  : ([0x11], [0xfc]),
#   ''        : ([0x14], [0xff]), #nothing
    'z'       : ([0x18], [0x02]),
    'x'       : ([0x1b], [0x05]),
    'c'       : ([0x1e], [0x08]),
    'v'       : ([0x21], [0x0b]),
    'b'       : ([0x24], [0x0e]),
    'n'       : ([0x27], [0x11]),
    'm'       : ([0x2a], [0x14]),
    ','       : ([0x2d], [0x17]),
    '.'       : ([0x30], [0x1a]),
    '/'       : ([0x33], [0x1d]),
#   ''        : ([0x36], [0x20]), #f10/f11
    'rshift'  : ([0x39], [0x23]),
#   ''        : ([0x3c], [0x26]), #f12
    'lctrl'   : ([0x51], [0x3b]),
    'lsuper'  : ([0x54], [0x3e]),
    'lalt'    : ([0x57], [0x41]),
    'space'   : ([0x5a], [0x44]),
    'ralt'    : ([0x5d], [0x47]),
    'rsuper'  : ([0x60], [0x4a]),
    'menu'    : ([0x63], [0x4d]),
#   ''        : ([0x66], [0x50]), #5/6
    'rctrl'   : ([0x69], [0x53])
}

brightness = {
    '5' : ([0x37], [0x05]),
    '4' : ([0x36], [0x04]),
    '3' : ([0x35], [0x03]),
    '2' : ([0x34], [0x02]),
    '1' : ([0x33], [0x01]),
    '0' : ([0x32], [0x00])
}

dev = usb.core.find(idVendor=vendor, idProduct=product)
if dev is None:
    print("Keyboard not found")
    exit()

def detach_device():
    try:
        dev.detach_kernel_driver(0)
        dev.detach_kernel_driver(1)
        dev.set_configuration(bConfigurationValue)
    except Exception as exception:
        print("Failed to detach device: " + str(exception))
        exit()

def reattach_device():
    try:
        usb.util.dispose_resources(dev)
        dev.attach_kernel_driver(0)
        dev.attach_kernel_driver(1)
    except Exception as exception:
        print("Failed to reattach device: " + str(exception))
        exit()

def change_light(button, color):
    msg = prefix + keycodes[button][0] + [0x01, 0x11, 0x03] + keycodes[button][1] + [0x02, 0x00] + color
    while len(msg) < 64: #fill msg with zeros to 64 bytes
        msg = msg + [0x00]
    send_packet(msg)

def change_brightness(level):
    msg = prefix + brightness[level][0] + [0x00, 0x06, 0x01, 0x2b, 0x00, 0x00] + brightness[level][1]
    while len(msg) < 64: #fill msg with zeros to 64 bytes
        msg = msg + [0x00]
    send_packet(msg)

def send_packet(msg):
    open = [0x04, 0x01, 0x00, 0x01] + [0x00]*60
    close = [0x04, 0x02, 0x00, 0x02] + [0x00]*60
    detach_device()
    dev.ctrl_transfer(0x21, 9, 0x0204, 1, open)
    dev.ctrl_transfer(0x21, 9, 0x0204, 1, msg)
    dev.ctrl_transfer(0x21, 9, 0x0204, 1, close)
    reattach_device()


#pd1 = [0x04, 0x37, 0x00, 0x06, 0x01, 0x2b, 0x00, 0x00, 0x05] #brightness 5
#pd1 = [0x04, 0x36, 0x00, 0x06, 0x01, 0x2b, 0x00, 0x00, 0x04] #brightness 4
#pd1 = [0x04, 0x32, 0x00, 0x06, 0x01, 0x2b, 0x00, 0x00, 0x00] #brightness 0

#pd1 = [0x04, 0xd5, 0x01, 0x11, 0x03, 0xc0, 0x02, 0x00, 0xff] + [0x00]*55   #a red
#pda = [0x04] + a[0] + [0x01, 0x11, 0x03] + a[1] + [0x02, 0x00, 0x00, 0xff] + [0x00]*54  #a green
#pd1 = [0x04, 0xd8, 0x01, 0x11, 0x03, 0xc3, 0x02, 0x00, 0xff] + [0x00]*55   #s red
#pd1 = [0x04, 0xdb, 0x01, 0x11, 0x03, 0xc6, 0x02, 0x00, 0xff] + [0x00]*55   #d red
#pd1 = [0x04, 0x96, 0x01, 0x11, 0x03, 0x81, 0x02, 0x00, 0xff] + [0x00]*55   #q red
#pd1 = [0x04, 0x18, 0x01, 0x11, 0x03, 0x02, 0x03, 0x00, 0xff] + [0x00]*55   #z red
#pd1 = [0x04, 0x57, 0x01, 0x11, 0x03, 0x41, 0x03, 0x00, 0xff] + [0x00]*55   #alt red
#pd1 = [0x04, 0x5a, 0x01, 0x11, 0x03, 0x44, 0x03, 0x00, 0xff] + [0x00]*55   #space red
#pd1 = [0x04, 0x57, 0x01, 0x11, 0x03, 0x42, 0x02, 0x00, 0xff] + [0x00]*55   #1 red
#pd1 = [0x04, 0x5a, 0x01, 0x11, 0x03, 0x45, 0x02, 0x00, 0xff] + [0x00]*55   #2 red
#pd1 = [0x04, 0x5d, 0x01, 0x11, 0x03, 0x48, 0x02, 0x00, 0xff] + [0x00]*55   #3 red

#pd1 = [0x04, 0x39, 0x10, 0x11, 0x36, 0x00, 0x02, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00]
#pd2 = [0x04, 0x70, 0x0f, 0x11, 0x36, 0x00, 0x02, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00]

#dev.ctrl_transfer(0x21, 9, 0x0204, 1, pda)
#dev.ctrl_transfer(0x21, 9, 0x0204, 1, pd1)
#dev.ctrl_transfer(0x21, 9, 0x0204, 1, pd2)
#dev.ctrl_transfer(0x21, 9, 0x0204, 1, pdz)


parser = argparse.ArgumentParser()

parser.add_argument('-l', '--level',
                    type = int,
                    choices = [0, 1, 2, 3, 4, 5],
                    metavar = '<0-5>',
                    help = "brightness level")

parser.add_argument('-c', '--color',
                    nargs = 3,
                    type = int,
                    choices = range(0,256),
                    metavar = '<0-255>',
                    help = "<r> <g> <b>")

parser.add_argument('-k', '--key',
                    metavar = '<key>',
                    required = '-c' in sys.argv or '--color' in sys.argv,  #require if --color is given
                    choices = keycodes.keys(),
                    help = "")

parser.add_argument('--listkeys',
                    action = 'store_true',
                    help = "list available keys")


args = parser.parse_args()

if args.listkeys:
    print(keycodes.keys())
elif args.level:
    change_brightness(str(args.level))
elif args.color:
    change_light(args.key, args.color)
elif len(sys.argv) < 2:
    parser.print_help()